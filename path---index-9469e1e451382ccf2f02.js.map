{"version":3,"sources":["webpack:///path---index-9469e1e451382ccf2f02.js","webpack:///./.cache/json/index.json"],"names":["webpackJsonp","258","module","exports","data","site","siteMetadata","title","allMarkdownRemark","edges","node","html","timeToRead","excerpt","fields","slug","frontmatter","date","pathContext","current","skip","limit","total","prev","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,SAAgBC,mBAAsBC,QAAUC,MAAQC,KAAA,2xbAAiibC,WAAA,EAAAC,QAAA,oHAAAC,QAAsgCC,KAAA,wBAA8BC,aAAgBT,MAAA,oBAAAU,KAAA,iBAAoDP,MAAQC,KAAA,uCAAAC,WAAA,EAAAC,QAAA,gCAAAC,QAAiHC,KAAA,WAAiBC,aAAgBT,MAAA,YAAAU,KAAA,mBAA6CC,aAAgBC,QAAA,EAAAC,KAAA,EAAAC,MAAA,GAAAC,MAAA,EAAAC,MAAA,EAAAC,MAAA","file":"path---index-9469e1e451382ccf2f02.js","sourcesContent":["webpackJsonp([142629428675168],{\n\n/***/ 258:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"剑与魔法\"}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"html\":\"<h2 id=\\\"先来明确几个问题\\\"><a href=\\\"#%E5%85%88%E6%9D%A5%E6%98%8E%E7%A1%AE%E5%87%A0%E4%B8%AA%E9%97%AE%E9%A2%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>先来明确几个问题</h2>\\n<p>Q1: 什么是继承<br>\\nA1: 继承（英语：inheritance）是面向对象软件技术当中的一个概念。如果一个类别A“继承自”另一个类别B，就把这个A称为“B的子类别”，而把B称为“A的父类别”也可以称“B是A的超类”。继承可以使得子类别具有父类别的各种属性和方法，而不需要再次编写相同的代码。在令子类别继承父类别的同时，可以重新定义某些属性，并重写某些方法，即覆盖父类别的原有属性和方法，使其获得与父类别不同的功能。另外，为子类别追加新的属性和方法也是常见的做法。<a href=\\\"https://zh.wikipedia.org/wiki/%E7%BB%A7%E6%89%BF_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)\\\">form wiki</a></p>\\n<p>Q2: TypeScript是怎么来实现的类继承呢?<br>\\nA2: 寄生组合继承</p>\\n<h2 id=\\\"分析\\\"><a href=\\\"#%E5%88%86%E6%9E%90\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>分析</h2>\\n<ul>\\n<li>子类要有父类的属性方法(静态，实例，原型链)，还可以重写父类的属性和方法</li>\\n<li>寄生组合继承</li>\\n</ul>\\n<h2 id=\\\"typescript的实现\\\"><a href=\\\"#typescript%E7%9A%84%E5%AE%9E%E7%8E%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>TypeScript的实现</h2>\\n<p>源文件 extend.ts</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Animal</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">type</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"An\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">protected</span> name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Animal\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Cat</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Animal</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">sleep</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"sleep\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p> 编译出的文件 extend.js</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">var</span> __extends <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>__extends<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> extendStatics <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span>setPrototypeOf <span class=\\\"token operator\\\">||</span>\\n        <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> __proto__<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Array</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>d<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> d<span class=\\\"token punctuation\\\">.</span>__proto__ <span class=\\\"token operator\\\">=</span> b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span>\\n        <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>d<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> p <span class=\\\"token keyword\\\">in</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasOwnProperty</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> d<span class=\\\"token punctuation\\\">[</span>p<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> b<span class=\\\"token punctuation\\\">[</span>p<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>d<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">extendStatics</span><span class=\\\"token punctuation\\\">(</span>d<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">__</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">constructor</span> <span class=\\\"token operator\\\">=</span> d<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n        d<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> b <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">?</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>__<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> b<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">__</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> Animal <span class=\\\"token operator\\\">=</span> <span class=\\\"token comment\\\">/** @class */</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Animal</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>name <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Animal\\\"</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    Animal<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">type</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"An\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> Animal<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> Cat <span class=\\\"token operator\\\">=</span> <span class=\\\"token comment\\\">/** @class */</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>_super<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">__extends</span><span class=\\\"token punctuation\\\">(</span>Cat<span class=\\\"token punctuation\\\">,</span> _super<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Cat</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> _super<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    Cat<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">sleep</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"sleep\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> Cat<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span>Animal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"参考文章\\\"><a href=\\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考文章</h2>\\n<ul>\\n<li><a href=\\\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html\\\">Javascript面向对象编程（二）：构造函数的继承 - 阮一峰的网络日志</a></li>\\n<li><a href=\\\"https://www.cnblogs.com/humin/p/4556820.html\\\">JS实现继承的几种方式 - 幻天芒</a></li>\\n</ul>\",\"timeToRead\":1,\"excerpt\":\"先来明确几个问题 Q1: 什么是继承 A1: 继承（英语：inheritance）是面向对象软件技术当中的一个概念。如果一个类别A“继承自”另一个类别B，就把这个A称为“B的子类别”，而把B称为“A的父类别”也可以称“B是A…\",\"fields\":{\"slug\":\"/typescript-extends/\"},\"frontmatter\":{\"title\":\"TypeScript实现继承的方式\",\"date\":\"2018-03-16\"}}},{\"node\":{\"html\":\"<p>剑与魔法(我的博客)创建于2018，记录自己成长的点点滴滴</p>\",\"timeToRead\":1,\"excerpt\":\"剑与魔法(我的博客)创建于2018，记录自己成长的点点滴滴\",\"fields\":{\"slug\":\"/about/\"},\"frontmatter\":{\"title\":\"关于 「剑与魔法」\",\"date\":\"2018-02-28\"}}}]}},\"pathContext\":{\"current\":1,\"skip\":0,\"limit\":10,\"total\":1,\"prev\":false,\"next\":false}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---index-9469e1e451382ccf2f02.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"剑与魔法\"}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"html\":\"<h2 id=\\\"先来明确几个问题\\\"><a href=\\\"#%E5%85%88%E6%9D%A5%E6%98%8E%E7%A1%AE%E5%87%A0%E4%B8%AA%E9%97%AE%E9%A2%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>先来明确几个问题</h2>\\n<p>Q1: 什么是继承<br>\\nA1: 继承（英语：inheritance）是面向对象软件技术当中的一个概念。如果一个类别A“继承自”另一个类别B，就把这个A称为“B的子类别”，而把B称为“A的父类别”也可以称“B是A的超类”。继承可以使得子类别具有父类别的各种属性和方法，而不需要再次编写相同的代码。在令子类别继承父类别的同时，可以重新定义某些属性，并重写某些方法，即覆盖父类别的原有属性和方法，使其获得与父类别不同的功能。另外，为子类别追加新的属性和方法也是常见的做法。<a href=\\\"https://zh.wikipedia.org/wiki/%E7%BB%A7%E6%89%BF_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)\\\">form wiki</a></p>\\n<p>Q2: TypeScript是怎么来实现的类继承呢?<br>\\nA2: 寄生组合继承</p>\\n<h2 id=\\\"分析\\\"><a href=\\\"#%E5%88%86%E6%9E%90\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>分析</h2>\\n<ul>\\n<li>子类要有父类的属性方法(静态，实例，原型链)，还可以重写父类的属性和方法</li>\\n<li>寄生组合继承</li>\\n</ul>\\n<h2 id=\\\"typescript的实现\\\"><a href=\\\"#typescript%E7%9A%84%E5%AE%9E%E7%8E%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>TypeScript的实现</h2>\\n<p>源文件 extend.ts</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Animal</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">type</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"An\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">protected</span> name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Animal\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Cat</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Animal</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">sleep</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"sleep\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p> 编译出的文件 extend.js</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">var</span> __extends <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>__extends<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> extendStatics <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span>setPrototypeOf <span class=\\\"token operator\\\">||</span>\\n        <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> __proto__<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Array</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>d<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> d<span class=\\\"token punctuation\\\">.</span>__proto__ <span class=\\\"token operator\\\">=</span> b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span>\\n        <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>d<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> p <span class=\\\"token keyword\\\">in</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasOwnProperty</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> d<span class=\\\"token punctuation\\\">[</span>p<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> b<span class=\\\"token punctuation\\\">[</span>p<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>d<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">extendStatics</span><span class=\\\"token punctuation\\\">(</span>d<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">__</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">constructor</span> <span class=\\\"token operator\\\">=</span> d<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n        d<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> b <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">?</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>__<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> b<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">__</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> Animal <span class=\\\"token operator\\\">=</span> <span class=\\\"token comment\\\">/** @class */</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Animal</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>name <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Animal\\\"</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    Animal<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">type</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"An\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> Animal<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> Cat <span class=\\\"token operator\\\">=</span> <span class=\\\"token comment\\\">/** @class */</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>_super<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">__extends</span><span class=\\\"token punctuation\\\">(</span>Cat<span class=\\\"token punctuation\\\">,</span> _super<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Cat</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> _super<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    Cat<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">sleep</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"sleep\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> Cat<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span>Animal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"参考文章\\\"><a href=\\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考文章</h2>\\n<ul>\\n<li><a href=\\\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html\\\">Javascript面向对象编程（二）：构造函数的继承 - 阮一峰的网络日志</a></li>\\n<li><a href=\\\"https://www.cnblogs.com/humin/p/4556820.html\\\">JS实现继承的几种方式 - 幻天芒</a></li>\\n</ul>\",\"timeToRead\":1,\"excerpt\":\"先来明确几个问题 Q1: 什么是继承 A1: 继承（英语：inheritance）是面向对象软件技术当中的一个概念。如果一个类别A“继承自”另一个类别B，就把这个A称为“B的子类别”，而把B称为“A的父类别”也可以称“B是A…\",\"fields\":{\"slug\":\"/typescript-extends/\"},\"frontmatter\":{\"title\":\"TypeScript实现继承的方式\",\"date\":\"2018-03-16\"}}},{\"node\":{\"html\":\"<p>剑与魔法(我的博客)创建于2018，记录自己成长的点点滴滴</p>\",\"timeToRead\":1,\"excerpt\":\"剑与魔法(我的博客)创建于2018，记录自己成长的点点滴滴\",\"fields\":{\"slug\":\"/about/\"},\"frontmatter\":{\"title\":\"关于 「剑与魔法」\",\"date\":\"2018-02-28\"}}}]}},\"pathContext\":{\"current\":1,\"skip\":0,\"limit\":10,\"total\":1,\"prev\":false,\"next\":false}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/index.json\n// module id = 258\n// module chunks = 142629428675168"],"sourceRoot":""}